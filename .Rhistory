legend.position = "top",          # place legend on the right
legend.title = element_blank(),     # optional: no title
legend.text = element_text(size = 8,face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14, face = "bold")) +
scale_color_viridis_c()
#   pcoa <- ggplot() +
#     geom_point(data = coordinates,
#                mapping = aes(x = `Axis.1`, y = `Axis.2`, colour = !!sym(grp)),
#                alpha = 0.8, size = 1) +
#     labs(title = paste0(dm_name, ': ', grp),
#          subtitle = subtitle) +
#     geom_segment(data = coordinates,
#                  aes(x = CentroidX, xend = Axis.1, y = CentroidY, yend = Axis.2, color = !!sym(grp)),
#                  alpha = 0.2, size = 0.5) +
#     xlab(paste('PC1 (', label_percent()(pc_exp[1]), ')', sep = '')) +
#     ylab(paste('PC2 (', label_percent()(pc_exp[2]), ')', sep = '')) +
#     theme(panel.grid.major = element_blank(),
#           panel.grid.minor = element_blank(),
#           panel.background = element_blank(),
#           axis.line = element_line(colour = 'black'),
#           legend.title = element_blank(),
#           legend.position = 'bottom',
#           legend.text = element_text(size = 8)) +
#     scale_color_gradient(low = "blue", high = "red")  # Adjust colors for your preference
#
}
return(pcoa)
}
x = plot_unifrac(dm = dm,metatable = metadata,grp = 'pressure',dm_name = 'weightedUniF',permtest = T,grp_continuous = T)
plotly(x)
#' library(vegan); library(ape)
#' data(dune)
#' dist_mtx <- vegdist(dune)
#' metadata <- data.frame(sampleID = rownames(dune), Management = dune.env$Management)
#' col21 <- c("red", "blue", "green")  # example color palette
#' plot_unifrac(dist_mtx, metadata, "Management", "Bray-Curtis")
#' }
#'
#' @import ape vegan ggplot2 dplyr scales viridis
#' @export
plot_beta_pcoa <- function(dm, metatable, grp, dm_name, permtest = FALSE,
grp_continuous = FALSE) {
set.seed(666)
# Ensure metadata format
metatable <- as.data.frame(metatable)
rownames(metatable) <- metatable$sampleID
metatable <- subset(metatable, get(grp) != "N.A.", select = c(grp))
# Subset distance matrix
dm <- dist_subset(dm, rownames(metatable))
# PCoA with Cailliez correction for negative eigenvalues
pcoa_res <- ape::pcoa(dm, correction = "cailliez")
coords <- data.frame(pcoa_res$vectors, check.names = FALSE)
# PERMANOVA & betadisp tests
group_counts <- table(metatable[[grp]])
subtitle <- "Adonis/permdisp skipped"
if (!any(group_counts < 5) && permtest) {
stopifnot(all(rownames(metatable) == names(dm)))
adonis_res <- vegan::adonis2(dm ~ get(grp), metatable, permutations = 1000)
adonis_p <- round(adonis_res$`Pr(>F)`[1], 4)
betadisp_res <- vegan::permutest(vegan::betadisper(dm, metatable[[grp]]),
permutations = 1000)
betadisp_p <- round(betadisp_res$tab[[6]][1], 4)
subtitle <- paste0("PERMANOVA p = ", adonis_p, ", Betadisp p = ", betadisp_p)
}
if (!all(rownames(metatable) == rownames(coords))) {
stop("Mismatch between PCoA coordinates and metadata rows")
}
# Prepare data for plotting
plot_data <- coords[, c(1, 2)]
plot_data[[grp]] <- metatable[[grp]][match(rownames(plot_data), rownames(metatable))]
centroids <- plot_data %>%
group_by_at(grp) %>%
summarize(CentroidX = mean(Axis.1), CentroidY = mean(Axis.2), .groups = "drop")
plot_data <- merge(plot_data, centroids, by = grp)
# Explained variance
pc_exp <- if ("Rel_corr_eig" %in% colnames(pcoa_res$values)) {
pcoa_res$values$Rel_corr_eig
} else {
pcoa_res$values$Relative_eig
}
# Plot: Discrete vs Continuous
if (!grp_continuous) {
pcoa_plot <- ggplot() +
geom_point(data = plot_data,
aes(x = Axis.1, y = Axis.2, colour = get(grp)),
alpha = 0.6, size = 0.8) +
geom_segment(data = plot_data,
aes(x = CentroidX, xend = Axis.1, y = CentroidY, yend = Axis.2,
color = get(grp)), alpha = 0.3, size = 0.3) +
geom_point(data = centroids,
aes(x = CentroidX, y = CentroidY, fill = get(grp)),
size = 4, shape = 21, stroke = 1.2, color = "black") +
labs(title = paste0(dm_name, ": ", grp), subtitle = subtitle) +
xlab(paste0("PC1 (", label_percent()(pc_exp[1]), ")")) +
ylab(paste0("PC2 (", label_percent()(pc_exp[2]), ")")) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "top",
legend.title = element_blank(),
legend.text = element_text(size = 8, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14, face = "bold")) +
scale_color_manual(values = col21) +
scale_fill_manual(values = col21)
} else {
pcoa_plot <- ggplot() +
geom_point(data = plot_data,
aes(x = Axis.1, y = Axis.2, colour = !!sym(grp)),
alpha = 0.6, size = 1.2) +
labs(title = paste0(dm_name, ": ", grp), subtitle = subtitle) +
xlab(paste0("PC1 (", label_percent()(pc_exp[1]), ")")) +
ylab(paste0("PC2 (", label_percent()(pc_exp[2]), ")")) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "top",
legend.title = element_blank(),
legend.text = element_text(size = 8, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14, face = "bold")) +
scale_color_viridis_c(option = "plasma")
}
return(pcoa_plot)
}
(x = plot_unifrac(dm = dm,metatable = metadata,grp = 'pressure',dm_name = 'weightedUniF',permtest = T,grp_continuous = T))
(y = plot_beta_pcoa(dm = dm,metatable = metadata,grp = 'pressure',dm_name = 'weightedUniF',permtest = T,grp_continuous = T))
x+y
cowplot::plot_grid(x,y)
(x = plot_unifrac(dm = dm,metatable = metadata,grp = 'group',dm_name = 'weightedUniF',permtest = T,grp_continuous = F))
(y = plot_beta_pcoa(dm = dm,metatable = metadata,grp = 'group',dm_name = 'weightedUniF',permtest = T,grp_continuous = F))
cowplot::plot_grid(x,y)
plotly(x)
plotly(y)
(y = plot_beta_pcoa(dm = dm,metatable = metadata,grp = 'group',dm_name = 'weightedUniF',permtest = T,grp_continuous = F))
plotly(y)
ggplotly(y)
runApp('diversity_shiny')
runApp('diversity_shiny')
runApp('diversity_shiny')
(y = plot_beta_pcoa(dm = dm,metatable = metadata,grp = 'group',dm_name = 'weightedUniF',permtest = T,grp_continuous = F))
(y = plot_beta_pcoa(dm = dm,metatable = metadata,grp = 'type',dm_name = 'weightedUniF',permtest = T,grp_continuous = F))
dm = dm
metatable = metadata
dm_name = 'x'
grp = 'type'
# Ensure metadata format
metatable <- as.data.frame(metatable)
rownames(metatable) <- metatable$sampleID
metatable <- subset(metatable, get(grp) != "N.A.", select = c(grp))
# Subset distance matrix
dm <- dist_subset(dm, rownames(metatable))
# PCoA with Cailliez correction for negative eigenvalues
pcoa_res <- ape::pcoa(dm, correction = "cailliez")
coords <- data.frame(pcoa_res$vectors, check.names = FALSE)
# PERMANOVA & betadisp tests
group_counts <- table(metatable[[grp]])
subtitle <- "Adonis/permdisp skipped"
if (!any(group_counts < 5) && permtest) {
stopifnot(all(rownames(metatable) == names(dm)))
adonis_res <- vegan::adonis2(dm ~ get(grp), metatable, permutations = 1000)
adonis_p <- round(adonis_res$`Pr(>F)`[1], 4)
betadisp_res <- vegan::permutest(vegan::betadisper(dm, metatable[[grp]]),
permutations = 1000)
betadisp_p <- round(betadisp_res$tab[[6]][1], 4)
subtitle <- paste0("PERMANOVA p = ", adonis_p, ", Betadisp p = ", betadisp_p)
}
if (!all(rownames(metatable) == rownames(coords))) {
stop("Mismatch between PCoA coordinates and metadata rows")
}
# Prepare data for plotting
plot_data <- coords[, c(1, 2)]
plot_data[[grp]] <- metatable[[grp]][match(rownames(plot_data), rownames(metatable))]
centroids <- plot_data %>%
group_by_at(grp) %>%
summarize(CentroidX = mean(Axis.1), CentroidY = mean(Axis.2), .groups = "drop")
plot_data <- merge(plot_data, centroids, by = grp)
# Explained variance
pc_exp <- if ("Rel_corr_eig" %in% colnames(pcoa_res$values)) {
pcoa_res$values$Rel_corr_eig
} else {
pcoa_res$values$Relative_eig
}
# Plot: Discrete vs Continuous
if (!grp_continuous) {
pcoa_plot <- ggplot() +
geom_point(data = plot_data,
aes(x = Axis.1, y = Axis.2, colour = get(grp)),
alpha = 0.6, size = 0.8) +
geom_segment(data = plot_data,
aes(x = CentroidX, xend = Axis.1, y = CentroidY, yend = Axis.2,
color = get(grp)), alpha = 0.3, size = 0.3) +
geom_point(data = centroids,
aes(x = CentroidX, y = CentroidY, fill = get(grp)),
size = 4, shape = 21, stroke = 1.2, color = "black") +
labs(title = paste0(dm_name, ": ", grp), subtitle = subtitle) +
xlab(paste0("PC1 (", label_percent()(pc_exp[1]), ")")) +
ylab(paste0("PC2 (", label_percent()(pc_exp[2]), ")")) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "top",
legend.title = element_blank(),
legend.text = element_text(size = 8, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14, face = "bold")) +
scale_color_manual(values = col21) +
scale_fill_manual(values = col21)
} else {
pcoa_plot <- ggplot() +
geom_point(data = plot_data,
aes(x = Axis.1, y = Axis.2, colour = !!sym(grp)),
alpha = 0.6, size = 1.2) +
labs(title = paste0(dm_name, ": ", grp), subtitle = subtitle) +
xlab(paste0("PC1 (", label_percent()(pc_exp[1]), ")")) +
ylab(paste0("PC2 (", label_percent()(pc_exp[2]), ")")) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "top",
legend.title = element_blank(),
legend.text = element_text(size = 8, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14, face = "bold")) +
scale_color_viridis_c(option = "plasma")
}
grp_continuous = F
# Plot: Discrete vs Continuous
if (!grp_continuous) {
pcoa_plot <- ggplot() +
geom_point(data = plot_data,
aes(x = Axis.1, y = Axis.2, colour = get(grp)),
alpha = 0.6, size = 0.8) +
geom_segment(data = plot_data,
aes(x = CentroidX, xend = Axis.1, y = CentroidY, yend = Axis.2,
color = get(grp)), alpha = 0.3, size = 0.3) +
geom_point(data = centroids,
aes(x = CentroidX, y = CentroidY, fill = get(grp)),
size = 4, shape = 21, stroke = 1.2, color = "black") +
labs(title = paste0(dm_name, ": ", grp), subtitle = subtitle) +
xlab(paste0("PC1 (", label_percent()(pc_exp[1]), ")")) +
ylab(paste0("PC2 (", label_percent()(pc_exp[2]), ")")) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "top",
legend.title = element_blank(),
legend.text = element_text(size = 8, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14, face = "bold")) +
scale_color_manual(values = col21) +
scale_fill_manual(values = col21)
} else {
pcoa_plot <- ggplot() +
geom_point(data = plot_data,
aes(x = Axis.1, y = Axis.2, colour = !!sym(grp)),
alpha = 0.6, size = 1.2) +
labs(title = paste0(dm_name, ": ", grp), subtitle = subtitle) +
xlab(paste0("PC1 (", label_percent()(pc_exp[1]), ")")) +
ylab(paste0("PC2 (", label_percent()(pc_exp[2]), ")")) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "top",
legend.title = element_blank(),
legend.text = element_text(size = 8, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14, face = "bold")) +
scale_color_viridis_c(option = "plasma")
}
pcoa_plot
plot_beta_pcoa(dm,metadata,'type','x')
plot_beta_pcoa(dm,metadata,'type','x2')
runApp('diversity_shiny')
runApp('diversity_shiny')
shiny::runApp('diversity_shiny')
runApp('diversity_shiny')
?hr
runApp('diversity_shiny')
path =
md = read.csv('test_data/metadata.csv')
dm = read.table('test_data/diveristy/metaphlan_bugs_list_unweighted-unifrac.tsv')
dm = read.table('test_data/diverisity/metaphlan_bugs_list_unweighted-unifrac.tsv')
dm = read.table('test_data/diversity/metaphlan_bugs_list_unweighted-unifrac.tsv')
View(dm)
plot_beta_pcoa(dm,md,'group',x)
plot_beta_pcoa(dm,md,'group','x')
library(shiny)
library(ggplot2)
library(ggpubr)
library(dplyr)
library(tidyr)
library(readr)
library(stringr)
library(plotly)
library(bslib)
library(tibble)
library(ape)
library(vegan)
library(usedist)
plot_beta_pcoa(dm,md,'group','x')
library(scales)
plot_beta_pcoa(dm,md,'group','x')
# Load helper functions
source("utils.R")
# Color palette for discrete groups
col21 <- rev(c("tomato1","darkblue","turquoise1","lightblue","darkred","mediumblue","purple","bisque",
"greenyellow","yellow","violetred2","darkgreen","darkgoldenrod1","deeppink3","cadetblue4",
"orchid2","seagreen3","purple4","dodgerblue2","red","gray27"))
plot_beta_pcoa(dm,md,'group','x')
plot_beta_pcoa(dm,md,'type','x')
runApp('diversity_shiny')
plot_beta_pcoa(dm,md,'type','x')
runApp('diversity_shiny')
runApp('diversity_shiny')
source("~/Library/CloudStorage/OneDrive-NationalInstitutesofHealth/R_dev/microbiome_shiny_app/diversity_shiny/utils.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalInstitutesofHealth/R_dev/microbiome_shiny_app/diversity_shiny/utils.R", echo=TRUE)
runApp('diversity_shiny')
#' library(vegan); library(ape)
#' data(dune)
#' dist_mtx <- vegdist(dune)
#' metadata <- data.frame(sampleID = rownames(dune), Management = dune.env$Management)
#' col21 <- c("red", "blue", "green")  # example color palette
#' plot_unifrac(dist_mtx, metadata, "Management", "Bray-Curtis")
#' }
#'
#' @import ape vegan ggplot2 dplyr scales viridis
#' @export
plot_unifrac <- function(dm, metatable, grp, dm_name, permtest = FALSE,
grp_continuous = FALSE) {
set.seed(666)
# Ensure metadata format
metatable <- as.data.frame(metatable)
rownames(metatable) <- metatable$sampleID
metatable <- subset(metatable, get(grp) != "N.A.", select = c(grp))
# Subset distance matrix
dm <- dist_subset(dm, rownames(metatable))
# PCoA with Cailliez correction for negative eigenvalues
pcoa_res <- ape::pcoa(dm, correction = "cailliez")
coords <- data.frame(pcoa_res$vectors, check.names = FALSE)
# PERMANOVA & betadisp tests
group_counts <- table(metatable[[grp]])
subtitle <- "Adonis/permdisp skipped"
if (!any(group_counts < 5) && permtest) {
stopifnot(all(rownames(metatable) == names(dm)))
adonis_res <- vegan::adonis2(dm ~ get(grp), metatable, permutations = 1000)
adonis_p <- round(adonis_res$`Pr(>F)`[1], 4)
betadisp_res <- vegan::permutest(vegan::betadisper(dm, metatable[[grp]]),
permutations = 1000)
betadisp_p <- round(betadisp_res$tab[[6]][1], 4)
subtitle <- paste0("PERMANOVA p = ", adonis_p, ", Betadisp p = ", betadisp_p)
}
if (!all(rownames(metatable) == rownames(coords))) {
stop("Mismatch between PCoA coordinates and metadata rows")
}
# Prepare data for plotting
plot_data <- coords[, c(1, 2)]
plot_data[[grp]] <- metatable[[grp]][match(rownames(plot_data), rownames(metatable))]
centroids <- plot_data %>%
group_by_at(grp) %>%
summarize(CentroidX = mean(Axis.1), CentroidY = mean(Axis.2), .groups = "drop")
plot_data <- merge(plot_data, centroids, by = grp)
# Explained variance
pc_exp <- if ("Rel_corr_eig" %in% colnames(pcoa_res$values)) {
pcoa_res$values$Rel_corr_eig
} else {
pcoa_res$values$Relative_eig
}
# Plot: Discrete vs Continuous
if (!grp_continuous) {
pcoa_plot <- ggplot() +
geom_point(data = plot_data,
aes(x = Axis.1, y = Axis.2, colour = get(grp)),
alpha = 0.6, size = 0.8) +
geom_segment(data = plot_data,
aes(x = CentroidX, xend = Axis.1, y = CentroidY, yend = Axis.2,
color = get(grp)), alpha = 0.3, size = 0.3) +
geom_point(data = centroids,
aes(x = CentroidX, y = CentroidY, fill = get(grp)),
size = 4, shape = 21, stroke = 1.2, color = "black") +
labs(title = paste0(dm_name, ": ", grp), subtitle = subtitle) +
xlab(paste0("PC1 (", label_percent()(pc_exp[1]), ")")) +
ylab(paste0("PC2 (", label_percent()(pc_exp[2]), ")")) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "top",
legend.title = element_blank(),
legend.text = element_text(size = 8, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14, face = "bold")) +
scale_color_manual(values = col21) +
scale_fill_manual(values = col21)
} else {
pcoa_plot <- ggplot() +
geom_point(data = plot_data,
aes(x = Axis.1, y = Axis.2, colour = !!sym(grp)),
alpha = 0.6, size = 1.2) +
labs(title = paste0(dm_name, ": ", grp), subtitle = subtitle) +
xlab(paste0("PC1 (", label_percent()(pc_exp[1]), ")")) +
ylab(paste0("PC2 (", label_percent()(pc_exp[2]), ")")) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "top",
legend.title = element_blank(),
legend.text = element_text(size = 8, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14, face = "bold")) +
scale_color_viridis_c(option = "plasma")
}
return(pcoa_plot)
}
runApp('diversity_shiny')
source("~/Library/CloudStorage/OneDrive-NationalInstitutesofHealth/R_dev/microbiome_shiny_app/diversity_shiny/utils.R", echo=TRUE)
runApp('diversity_shiny')
source("~/Library/CloudStorage/OneDrive-NationalInstitutesofHealth/R_dev/microbiome_shiny_app/diversity_shiny/utils.R", echo=TRUE)
runApp('diversity_shiny')
source("~/Library/CloudStorage/OneDrive-NationalInstitutesofHealth/R_dev/microbiome_shiny_app/diversity_shiny/utils.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalInstitutesofHealth/R_dev/microbiome_shiny_app/diversity_shiny/utils.R", echo=TRUE)
runApp('diversity_shiny')
source("~/Library/CloudStorage/OneDrive-NationalInstitutesofHealth/R_dev/microbiome_shiny_app/diversity_shiny/utils.R", echo=TRUE)
runApp('diversity_shiny')
runApp('diversity_shiny')
runApp('diversity_shiny')
runApp('diversity_shiny')
md = read.csv('nhlbi-167_diversity_shiny_test/metadata_nhlbi167.csv')
dm = read.table('test_data/167_diversity_shiny_test/weighted-unifrac.tsv')
dm = read.table('test_data/nhlbi-167_diversity_shiny_test/weighted-unifrac.tsv')
plot_beta_pcoa(dm,md,'type','x')
plot_beta_pcoa(dm,md,'Stage','x')
metatable = md
# Ensure metadata format
metatable <- as.data.frame(metatable)
rownames(metatable) <- metatable$sampleID
metatable <- subset(metatable, get(grp) != "N.A.", select = c(grp))
grp = 'Stage'
metatable <- subset(metatable, get(grp) != "N.A.", select = c(grp))
print(paste0(grp,'test'))
#print(paste0(grp,'test'))
# Subset distance matrix
dm <- dist_subset(dm, rownames(metatable))
head(dm)
head(rownames(metatable))
setdiff(rownames(metatable),rownames(dm))
setdiff(rownames(dm),rownames(metatable))
#print(paste0(grp,'test'))
# Subset distance matrix
dm <- dist_subset(dm, rownames(metatable))
View(metatable)
rownames(dm)
setequal(rownames(dm),rownames(metatable))
#print(paste0(grp,'test'))
# Subset distance matrix
dm <- dist_subset(dm, rownames(metatable))
class(dm)
dm = as.matrix(dm)
#print(paste0(grp,'test'))
# Subset distance matrix
dm <- dist_subset(dm, rownames(metatable))
rownames(dm)
rownames(dm)
colnames(dm)
head(rownames(metatable))
md = read.csv('test_data/nhlbi-167_diversity_shiny_test/metadata_nhlbi167.csv')
dm = read.table('test_data/nhlbi-167_diversity_shiny_test/weighted-unifrac.tsv')
plot_beta_pcoa(dm,md,'Stage','x')
as.matrix(dm)
#print(paste0(grp,'test'))
# Subset distance matrix
dm %>% as.matrix(.,check.name = F)
#print(paste0(grp,'test'))
# Subset distance matrix
dm %>% as.matrix(.,check.name = F) %>% dist_subset(., rownames(metatable))
dm %>% as.matrix(.,check.name = F)
dm = read.table('test_data/nhlbi-167_diversity_shiny_test/weighted-unifrac.tsv')
dm
dm = read.table('test_data/nhlbi-167_diversity_shiny_test/weighted-unifrac.tsv',check.names = FALSE)
dm
plot_beta_pcoa(dm,md,'Stage','x')
runApp('diversity_shiny')
df <- read.table('test_data/nhlbi-167_diversity_shiny_test/weighted-unifrac.tsv', header = TRUE, sep = "\t", check.names = FALSE)
View(df)
?read.table
dm = read.table('test_data/nhlbi-167_diversity_shiny_test/weighted-unifrac.tsv',check.names = FALSE)
View(dm)
dm = read.table('test_data/nhlbi-167_diversity_shiny_test/weighted-unifrac.tsv',check.names = FALSE, sep = "\t")
View(dm)
View(df)
df[[1]]
is.numeric(df[[1]])
is.numeric(df[[2]])
View(df)
if(!is.numeric(df[[1]])) {
rownames(df) <- df[[1]]
df = df[,-1]
}
View(df)
source("~/Library/CloudStorage/OneDrive-NationalInstitutesofHealth/R_dev/microbiome_shiny_app/diversity_shiny/utils.R", echo=TRUE)
runApp('diversity_shiny')
runApp('diversity_shiny')
runApp('diversity_shiny')
shiny::runApp('shiny_app')
